# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
  
#container: centos:7

stages:
- stage: provisioning_stage_A
  jobs:
  - job: A1
    steps:
    - bash: |
        #yum update -y
        sudo apt update -y
        
        #yum install -y java-1.8.0-openjdk-devel
        sudo apt install -y openjdk-8-jdk
        
        #curl https://downloads.lightbend.com/scala/2.12.10/scala-2.12.10.rpm --output scala-2.12.10.rpm
        curl https://downloads.lightbend.com/scala/2.12.2/scala-2.12.2.deb --output scala-2.12.2.deb
        #apt install -y scala-2.12.2.deb
        sudo dpkg -i scala-2.12.2.deb
        #curl https://bintray.com/sbt/rpm/rpm | tee /etc/yum.repos.d/bintray-sbt-rpm.repo
        
        #apt install -y sbt
        echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
        curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
        sudo apt-get update
        sudo apt-get install sbt
        
        sudo apt install -y git
        
        #yum install -y which
        #yum install -y yum-utils
        
        #yum install -y rpm-build
        sudo apt install -y rpm
        
        #yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        #yum install -y docker-ce docker-ce-cli containerd.io
        ##apt-get update (No seria necesario)
        #apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        #curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add â€“
        #add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
        ##apt-get update (No seria necesario)
        #apt-get install docker-ce
      displayName: Installing dependencies!
- stage: build_stage_B
  jobs:
  - job: B1
    displayName: initial_job
    steps: 
    - bash: |
        cd proyecto-gcs
        sbt compile
      displayName: Compiling project!
- stage: test_stage_C
  jobs:
  - job: C1
    steps:
    - bash: |
        sbt test
        #(No se pudieron instalar las dependencias para ejecutar los siguientes comandos)
        #sudo systemctl start docker
        #sudo docker run -it -e POSTGRES_PASSWORD=gcs -e POSTGRES_USER=gcs -e POSTGRES_DB=gcs -p 127.0.0.1:5432:5432  postgres:9.5
        #sbt "project gcsAppIT" test
      displayName: Testing app!
- stage: packaging_stage_D
  jobs:
  -  job: D1
     displayName: initial_job
     steps: 
     - bash: |
        sbt rpm:packageBin
       displayName: Packaging app!
- stage: deploy_stage_F
  jobs:
  - job: F1
    steps:
    - bash: |
        ##(Comando para copiar el archivo al servidor)
        #scp -i ~/.ssh/id_azure /gcs-app/target/rpm/RPMS/noarch/gcs-app-2.8.x-1.noarch.rpm azureuser@52.224.50.17:/home/azureuser
        #ssh -i ~/.ssh/id_azure azureuser@ip_server
        #sudo systemctl stop gcs-app
        #sudo rpm -e gcs-app
        #yum -y install java-1.8.0-openjdk-devel
        #sudo rpm -i gcs-app-2.8.x-1.noarch.rpm
        #sudo chown -R gcs-app /usr/share/gcs-app/
        #sudo chgrp -R gcs-app /usr/share/gcs-app/
        ##(Realizar los cambios en el archivo de configuration localizado en /etc/gcs-app/application.conf)
        #sudo systemctl start gcs-app
      displayName: Deploying app to production!


